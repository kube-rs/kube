use crate::TypeMeta;
use serde::{Deserialize, Serialize};

/// The `kind` field in [`TypeMeta`].
pub const META_KIND: &str = "ConversionReview";
/// The `api_version` field in [`TypeMeta`] on the v1 version.
pub const META_API_VERSION_V1: &str = "apiextensions.k8s.io/v1";

/// Struct that describes both request and response.
#[derive(Serialize, Deserialize)]
pub struct ConversionReview {
    /// Contains the API version and type of the request.
    #[serde(flatten)]
    pub types: TypeMeta,
    /// Contains conversion request.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub request: Option<ConversionRequest>,
    /// Contains conversion response.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub response: Option<ConversionResponse>,
}

/// Part of ConversionReview which is set on input (i.e. generated by apiserver)
#[derive(Serialize, Deserialize)]
pub struct ConversionRequest {
    /// Random uid uniquely identifying this conversion call
    pub uid: String,
    /// The API group and version the objects should be converted to
    #[serde(rename = "desiredAPIVersion")]
    pub desired_api_version: String,
    /// The list of objects to convert.
    /// May contain one or more objects, in one or more versions.
    // This field used raw Value instead of Object/DynamicObject to simplify
    // further downcasting.
    pub objects: Vec<serde_json::Value>,
}

/// Part of ConversionReview which is set on output (i.e. generated by conversion webhook)
#[derive(Serialize, Deserialize)]
pub struct ConversionResponse {
    /// Copy of .request.uid
    pub uid: String,
    /// Outcome of the conversion operation
    pub result: ConversionResult,
    /// Converted objects in the same order as in the request. Should be empty
    /// if conversion failed.
    #[serde(rename = "convertedObjects")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub converted_objects: Option<Vec<serde_json::Value>>,
}

impl ConversionResponse {
    /// Creates successful conversion response.
    /// `request_uid` must be equal to the `.uid` field in the request.
    /// `converted_objects` must specify objects in the exact same order as on input.
    pub fn success(request_uid: String, converted_objects: Vec<serde_json::Value>) -> Self {
        ConversionResponse {
            uid: request_uid,
            result: ConversionResult {
                status: Some(ConversionStatus::Success),
                message: None,
            },
            converted_objects: Some(converted_objects),
        }
    }

    /// Creates failed conversion response (discouraged).
    /// `request_uid` must be equal to the `.uid` field in the request.
    /// `message` will be returned to the apiserver.
    pub fn error(request_uid: String, message: String) -> Self {
        ConversionResponse {
            uid: request_uid,
            result: ConversionResult {
                status: Some(ConversionStatus::Failed),
                message: Some(message),
            },
            converted_objects: None,
        }
    }
}

/// Outcome of the conversion operation
#[derive(Serialize, Deserialize)]
pub struct ConversionResult {
    /// Overall status of the conversion
    pub status: Option<ConversionStatus>,
    /// Optional message that will be returned to client
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}

/// Overall status of the conversion
#[derive(Serialize, Deserialize)]
pub enum ConversionStatus {
    /// All objects were successfully converted
    Success,
    /// At least one object could not be converted.
    /// It is recommended that conversion fails as rare as possible, in particular
    /// no validation checks should be performed.
    Failed,
}
