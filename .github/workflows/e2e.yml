name: e2e
on:
  pull_request:



jobs:
  mk8sv:
    # comile check e2e tests against mk8sv
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          toolchain: stable
          profile: minimal
      # Smart caching for Rust projects.
      # Includes workaround for macos cache corruption.
      # - https://github.com/rust-lang/cargo/issues/8603
      # - https://github.com/actions/cache/issues/403
      - uses: Swatinem/rust-cache@v1

      - uses: nolar/setup-k3d-k3s@v1
        with:
          version: v1.19
          # k3d-kube
          k3d-name: kube
          # Used to avoid rate limits when fetching the releases from k3s repo.
          # Anonymous access is limited to 60 requests / hour / worker
          # github-token: ${{ secrets.GITHUB_TOKEN }}
          k3d-args: "--no-lb --k3s-arg --no-deploy=traefik,servicelb,metrics-server@server:*"

      # Real CI work starts here
      - name: Build workspace
        run: cargo build

      - name: boot openssl, latest k8s
        run: cargo run -p e2e --bin boot --features=openssl,latest
      - name: boot openssl, minimum supported k8s
        run: cargo run -p e2e --bin boot --features=openssl,mk8sv
      #- name: boot rustls, latest k8s
      #  run: cargo run -p e2e --bin boot --features=rustls,latest
      #- name: boot rustls, minimum supported k8s
      #  run: cargo run -p e2e --bin boot --features=rustls,mk8sv

  in-cluster:
    # in-cluster e2e via docker on linux
    runs-on: ubuntu-latest
    strategy:
      # Prevent GitHub from cancelling all in-progress jobs when a matrix job fails.
      fail-fast: false
      matrix:
        tls: [openssl, rustls]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
            target
          key: musl-cargo-${{ hashFiles('**/Cargo.toml') }}-${{matrix.k8s}}

      - uses: nolar/setup-k3d-k3s@v1
        with:
          version: latest
          # k3d-kube
          k3d-name: kube
          # Used to avoid rate limits when fetching the releases from k3s repo.
          # Anonymous access is limited to 60 requests / hour / worker
          # github-token: ${{ secrets.GITHUB_TOKEN }}
          k3d-args: "--no-lb --k3s-arg --no-deploy=traefik,servicelb,metrics-server@server:*"

      - name: Compile e2e
        run: |
          mkdir -p ~/.cargo/{git,registry}
          docker run --rm -t \
              --mount type=bind,source=${{ github.workspace }},target=/volume \
              --mount type=bind,source=$HOME/.cargo/registry,target=/root/.cargo/registry \
              --mount type=bind,source=$HOME/.cargo/git,target=/root/.cargo/git \
              clux/muslrust:stable \
              cargo build -p e2e --release --bin=job --features=latest,${{matrix.tls}} -v
          cp target/x86_64-unknown-linux-musl/release/job e2e/

      - name: Build image
        run: "docker build -t clux/kube-e2e:${{ github.sha }} e2e/"
      - name: Import image
        run: "k3d image import clux/kube-e2e:${{ github.sha }} --cluster kube"
      - run: sed -i 's/latest/${{ github.sha }}/g' e2e/deployment.yaml

      - name: Create resource
        run: kubectl apply -f e2e/deployment.yaml -n apps
      - run: kubectl get all -n apps
      - run: kubectl describe jobs/e2e -n apps
      - name: Wait for job to complete
        run: |
          kubectl wait --for=condition=complete job/e2e -n apps --timeout=50s || kubectl logs -f job/e2e -n apps
          kubectl get all -n apps
          kubectl wait --for=condition=complete job/e2e -n apps --timeout=10s || kubectl get pods -n apps | grep e2e | grep Completed
